$current-theme: null !default;
$env: development !default;

@mixin themify ($attr:null, $themes: $themes) {

  @each $theme in $themes {
    $current-theme: $theme !global;

    @if $attr==null {
      :global(#{$theme}) & {
        @content;
      }
    }

    @else {
      &[data-#{$attr}="#{$theme}"] {
        @content;
      }
    }
  }
}

@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin retina($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin font-face($font-name, $file-name, $font-display: swap, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
    url($file-name + '.woff') format('woff'),
    url($file-name + '.ttf') format('truetype'),
    url($file-name + '.svg##{$font-name}') format('svg');
    font-weight: $weight;
    font-display: $font-display;
    font-style: $style;
  }
}

@mixin screen($size) {
  $desktop: "(min-width: 1024px)";
  $tablet: "(min-width: 768px) and (max-width: 1023px)";
  $mobile: "(max-width: 767px)";

  @if $size==desktop {
    @media only screen and #{$desktop} {
      @content;
    }
  }

  @else if $size==tablet {
    @media only screen and #{$tablet} {
      @content;
    }
  }

  @else if $size==mobile {
    @media only screen and #{$mobile} {
      @content;
    }
  }

  @else {
    @media only screen and #{$size} {
      @content;
    }
  }
}

@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

// @include ratio(16,9)
@mixin ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  >[data-src] {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin redline() {
  @if $env==development {

    body *,
    body *:before,
    body *:after {
      border: 1px solid red;
    }
  }
}

@mixin center() {
  display: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin media($width, $type: min) {
  $breakpoints: ("phone": 400px,
    "phone-wide": 480px,
    "phablet": 560px,
    "tablet-small": 640px,
    "tablet": 768px,
    "tablet-wide": 1024px,
    "desktop": 1248px,
    "desktop-wide": 1440px) !default;

  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);

    @if $type==max {
      $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

// Fluid properties

@mixin fp($property, $min, $max, $start: 320, $end: breakpoint('desktop'), $clip: true, $clipAtStart: true, $clipAtEnd: true) {
  $start: $start / ($start * 0 + 1);
  $end: $end / ($end * 0 + 1);
  $multiplier: ($max - $min) / ($end - $start) * 100;
  $adder: ($min * $end - $max * $start) / ($end - $start);
  $formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});

  @if $clip and $clipAtStart {
    @media (max-width: #{$start + 0px}) {
      #{$property}: $min + 0px;
    }
  }

  @if $clip and $clipAtEnd {
    @media (min-width: #{$end + 0px}) {
      #{$property}: $max + 0px;
    }
  }

  #{$property}: $formula;
}

// font breakpoints
@mixin font-size($sizes) {

  @each $breakpoint,
  $size in $sizes {
    @if $breakpoint==base {
      font-size: $size;
    }

    @else {
      @include mq($breakpoint) {
        font-size: $size;
      }
    }
  }
}

@mixin unselectable {
  -webkit-touch-callout: none;
  user-select: none;
}